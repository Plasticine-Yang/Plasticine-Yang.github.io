import{_ as s,c as n,o as a,a as l}from"./app.aa6137c4.js";const p="/assets/Sender实例的action-type类型提示.46224869.jpg",o="/assets/Sender实例的action类型提示.823fc572.jpg",e="/assets/配置管理器的类型提示能力1.8a66e0af.jpg",t="/assets/配置管理器的类型提示能力2.8cfb510e.jpg",h=JSON.parse('{"title":"架构设计","description":"","frontmatter":{},"headers":[{"level":2,"title":"整体设计","slug":"整体设计","link":"#整体设计","children":[]},{"level":2,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]},{"level":2,"title":"Core","slug":"core","link":"#core","children":[{"level":3,"title":"数据上报能力","slug":"数据上报能力","link":"#数据上报能力","children":[]},{"level":3,"title":"配置管理器","slug":"配置管理器","link":"#配置管理器","children":[]},{"level":3,"title":"插件系统","slug":"插件系统","link":"#插件系统","children":[]},{"level":3,"title":"生命周期钩子","slug":"生命周期钩子","link":"#生命周期钩子","children":[]}]},{"level":2,"title":"WebSDK","slug":"websdk","link":"#websdk","children":[{"level":3,"title":"JavaScript 代码运行时错误监控","slug":"javascript-代码运行时错误监控","link":"#javascript-代码运行时错误监控","children":[]}]}],"relativePath":"fe-monitor-system/architecture-design.md","lastUpdated":1673624724000}'),c={name:"fe-monitor-system/architecture-design.md"},r=l(`<h1 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-hidden="true">#</a></h1><h2 id="整体设计" tabindex="-1">整体设计 <a class="header-anchor" href="#整体设计" aria-hidden="true">#</a></h2><p>为支持多平台、可拓展、可插拔的特点，整体 SDK 的架构设计是 <code>内核+插件</code> 的插件式设计</p><p>Core 提供平台无关的底层核心实现，然后具体平台的 SDK 只需要继承 Core 类，然后实现具体平台需要的插件安装到 Core 实例上即可</p><p>比如 Web 端的 JavaScript 代码错误监控、网络错误监控等都是通过插件的方式去实现，然后注册到 Core 实例中，这种插件式的设计提供了极大的灵活性，并且其拓展性和可插拔性都十分可观</p><p>并且我为各个模块都添加了单元测试，以 TDD 的方式进行开发，一方面能够给自己设计 API 带来灵感，另一方面也能够让我在发现架构设计不合理时大胆地对代码进行重构</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-hidden="true">#</a></h2><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">packages</span></span>
<span class="line"><span style="color:#A6ACCD;">├── browser 浏览器平台下的监控 SDK 实现</span></span>
<span class="line"><span style="color:#A6ACCD;">├── core    底层通用逻辑 -- 具体平台实现会继承自该包导出的 Core 类</span></span>
<span class="line"><span style="color:#A6ACCD;">├── server  服务端 -- 用于接收上报数据以及获取可视化相关数据</span></span>
<span class="line"><span style="color:#A6ACCD;">└── shared  各包共享的常量、工具函数</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-hidden="true">#</a></h2><p><code>Core</code> 类是底层核心，其提供了与平台无关的能力</p><h3 id="数据上报能力" tabindex="-1">数据上报能力 <a class="header-anchor" href="#数据上报能力" aria-hidden="true">#</a></h3><p>通过 <code>Core</code> 实例的 <code>sender</code> 属性获取 <code>Sender</code> 实例</p><p>Sender 实例允许链式调用 <code>action</code> 方法注册平台特有的数据上报逻辑，并在需要上报数据时调用 <code>Sender</code> 实例的 <code>send</code> 方法，指定已注册的 action 类型，传入 payload 后即可触发注册的上报逻辑，本质上就是一个发布订阅设计模式的应用</p><p>并且通过 TypeScript 类型体操为 Sender 提供了良好的类型提示能力，可以显式声明用到的 Action 类型，并将其传递给 Core 的泛型参数即可，以 WebSDK 举例：</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 运行时错误 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">runtime-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RuntimeErrorActionPayload</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusinessResponse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RuntimeErrorActionResponse</span><span style="color:#89DDFF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>效果如下：</p><p><img src="`+p+'" alt="Sender实例的action-type类型提示"></p><p><img src="'+o+`" alt="Sender实例的action类型提示"></p><p>并且提供了批量注册 actions 的能力，这使得我们可以将 action 的实现抽离到单独的文件中，然后统一进行注册，而不用在子类中去一个个注册 action，使得代码可读性更高</p><p>比如在 <code>action.ts</code> 中去实现各个 action</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> actions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">runtime-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">payload</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">api</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtimeError</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reportRuntimeErrorInfo</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>然后在继承了 Core 的子类中调用 sender 实例的 <code>batchRegisterActions</code> 方法即可</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight has-focused-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultWebSDKConfig</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 批量注册 sender actions </span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">batchRegisterActions</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">actions</span><span style="color:#F07178;">) </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="配置管理器" tabindex="-1">配置管理器 <a class="header-anchor" href="#配置管理器" aria-hidden="true">#</a></h3><p>子类可自定义所需配置，并提供默认配置，传递给 Core 的构造函数即可通过 <code>this.configManager.resolvedConfig</code> 获取到配置管理器解析出来的配置</p><p>同样的，也可以定义好配置的类型，然后传递给 Core 的泛型参数即可获取完整的类型提示能力</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/** </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 数据上报 url */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">senderURL</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultWebSDKConfig</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 能够有类型提示</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">configManager</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resolvedConfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">senderURL</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="`+e+'" alt="配置管理器的类型提示能力1"></p><p><img src="'+t+`" alt="配置管理器的类型提示能力2"></p><h3 id="插件系统" tabindex="-1">插件系统 <a class="header-anchor" href="#插件系统" aria-hidden="true">#</a></h3><p>继承了 Core 的子类中可以直接通过 <code>this.use</code> 进行插件注册，一个插件是一个实现了 <code>install</code> 方法的对象，可以直接通过导入 <code>@plasticine-monitor/core</code> 包中的 <code>Plugin</code> 类型获取其类型定义</p><p>这里以监听 JavaScript 代码运行时错误的插件实现为例：</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Plugin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@plasticine-monitor/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WebSDK</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../sdk</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 监听运行时错误插件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> runtimeErrorPlugin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">webSDK</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在 WebSDK 实现中通过调用 <code>this.use</code> 注册插件</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(runtimeErrorPlugin)</span></span>
<span class="line"></span></code></pre></div><h3 id="生命周期钩子" tabindex="-1">生命周期钩子 <a class="header-anchor" href="#生命周期钩子" aria-hidden="true">#</a></h3><p>Core 还提供了完整的生命周期钩子（仍在开发中），目前已有的生命周期钩子包括：</p><ul><li>onNetworkRequesterInit: 用于初始化网络请求器，比如 axios</li></ul><h4 id="onnetworkrequesterinit" tabindex="-1">onNetworkRequesterInit <a class="header-anchor" href="#onnetworkrequesterinit" aria-hidden="true">#</a></h4><p>为什么要有该生命周期钩子呢？axios 这样的网络请求库直接使用不就可以了吗？干嘛要在这个钩子中进行初始化呢？</p><p>因为我们开发的是 SDK 而不是常规的业务项目开发，对于常规的业务项目，其网络请求的 baseURL 是可以预先知道的，最终打包到构建产物中即可使用</p><p>而 SDK 中，baseURL 是无法预先知道的，因此我们需要将其作为 SDK 的配置项传入，并且在 SDK 初始化的时候传入 baseURL 去初始化 axios 实例</p><p>为了方便管理 axios 实例，我实现了一个 <code>AxiosInstanceManager</code>，在这里面负责对 axios 实例进行管理，其实例暴露一个 <code>initAxiosInstance</code> 方法，这样我们就能将 axios 实例的初始化延迟到 SDK 初始化流程中执行，在 axios 实例的角度而言，其相当于被懒加载了</p><p>由于 axios 实例懒加载，导致了封装 api 请求的时候，不能直接使用 axios，而要间接地通过 <code>AxiosInstanceManger</code> 实例去获取 axios 实例，以我封装的 <code>Request</code> 类为例，部分代码如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight has-focused-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Request</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">axiosInstanceManager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AxiosInstanceManager</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RequestBody</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ResponseData</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Method</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RequestBody</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">responsePreprocessor</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ResponsePreprocessor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseData</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UnifiedResult</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseData</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">axiosInstanceManager</span><span style="color:#F07178;"> </span></span>
<span class="line has-focus"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#F07178;">() </span></span>
<span class="line has-focus"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">request</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">) </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">axiosResponse</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">businessResponse</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">BusinessResponse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ResponseData</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">axiosResponse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">responsePreprocessor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">            (</span><span style="color:#A6ACCD;">businessResponse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">responsePreprocessor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">businessResponse</span><span style="color:#F07178;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">([</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">businessResponse</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">([</span><span style="color:#A6ACCD;">reason</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>站在 Request 的角度，因为不能预先将 axios 实例初始化好，因此要从具有获取 axios 实例能力的 <code>axiosInstanceManager</code> 对象中获取 axios 实例，因为 SDK 的初始化一定是在 Request 实例的方法被调用之前进行的，所以等到 Request 实例的方法触发时，<code>axiosInstanceManager</code> 中的 axios 实例已初始化完毕，可以正常使用</p><p>出于这个原因，设计了 <code>onNetworkRequesterInit</code> 这个生命周期钩子，其使用方式很简单，执行 SDK 中网络请求所需的初始化操作即可，以上面的例子来说就是执行 <code>axiosInstanceManager.initAxiosInstance</code> 方法</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight has-focused-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Core</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionsType</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDKConfig</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defaultWebSDKConfig</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 在网络请求工具初始化钩子中初始化 axios instance</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">onNetworkRequesterInit</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">senderURL</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">configManager</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resolvedConfig</span><span style="color:#F07178;"> </span></span>
<span class="line has-focus"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">axiosInstanceManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">initAxiosInstance</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">senderURL</span><span style="color:#F07178;">) </span></span>
<span class="line has-focus"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="websdk" tabindex="-1">WebSDK <a class="header-anchor" href="#websdk" aria-hidden="true">#</a></h2><p>WebSDK 是浏览器平台下的监控 SDK 实现，其继承自 Core 类，通过插件的方式实现各种监控能力</p><p>目前以实现的监控能力有：</p><ul><li>JavaScript 代码运行时错误监控</li></ul><h3 id="javascript-代码运行时错误监控" tabindex="-1">JavaScript 代码运行时错误监控 <a class="header-anchor" href="#javascript-代码运行时错误监控" aria-hidden="true">#</a></h3><p>对应的插件名为 <code>runtimeErrorPlugin</code>，其实现很简单，主要就是通过 <code>window.addEventListener</code> 去监听 <code>error</code> 事件，并在监听到错误时调用 Core 实例提供的 sender 的 send 方法完成数据的上报</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 监听运行时错误插件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> runtimeErrorPlugin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">install</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">webSDK</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">monitorRuntimeError</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">webSDK</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> 监听运行时错误</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">monitorRuntimeError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">webSDK</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebSDK</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 注册运行时错误上报的 sender action</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">ev</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">webSDK</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">runtime-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      errorMessage</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      rowNo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lineno</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      colNo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">colno</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,55),y=[r];function F(D,i,C,A,d,u){return a(),n("div",null,y)}const f=s(c,[["render",F]]);export{h as __pageData,f as default};
