import{_ as s,c as a,o as n,a as o}from"./app.d1f8b26b.js";const l="/assets/ErrorEvent的属性.dd92884d.jpg",e="/assets/静态资源加载异常.9d023e48.jpg",p="/assets/unhandledrejection对象的属性.4d9ddebf.jpg",t="/assets/跨域时的error事件ev对象.d81048bb.jpg",g=JSON.parse('{"title":"错误监控","description":"","frontmatter":{},"headers":[{"level":2,"title":"可监控的错误类型","slug":"可监控的错误类型","link":"#可监控的错误类型","children":[]},{"level":2,"title":"运行时判断错误类型","slug":"运行时判断错误类型","link":"#运行时判断错误类型","children":[]},{"level":2,"title":"为每个错误生成 uid","slug":"为每个错误生成-uid","link":"#为每个错误生成-uid","children":[{"level":3,"title":"btoa","slug":"btoa","link":"#btoa","children":[]},{"level":3,"title":"decodeURIComponent","slug":"decodeuricomponent","link":"#decodeuricomponent","children":[]}]},{"level":2,"title":"JavaScript 代码运行错误","slug":"javascript-代码运行错误","link":"#javascript-代码运行错误","children":[]},{"level":2,"title":"资源加载错误","slug":"资源加载错误","link":"#资源加载错误","children":[]},{"level":2,"title":"Promise 错误","slug":"promise-错误","link":"#promise-错误","children":[]},{"level":2,"title":"Http 请求错误","slug":"http-请求错误","link":"#http-请求错误","children":[]},{"level":2,"title":"CORS 跨域错误","slug":"cors-跨域错误","link":"#cors-跨域错误","children":[{"level":3,"title":"解决方案：","slug":"解决方案","link":"#解决方案","children":[]}]}],"relativePath":"fe-monitor-system/error-monitor.md","lastUpdated":1673860506000}'),r={name:"fe-monitor-system/error-monitor.md"},c=o(`<h1 id="错误监控" tabindex="-1">错误监控 <a class="header-anchor" href="#错误监控" aria-hidden="true">#</a></h1><h2 id="可监控的错误类型" tabindex="-1">可监控的错误类型 <a class="header-anchor" href="#可监控的错误类型" aria-hidden="true">#</a></h2><ul><li>JavaScript 代码运行错误</li><li>资源加载错误</li><li>Promise 错误</li><li>Http 请求错误</li><li>CORS 跨域错误</li></ul><p>可以定义一个枚举去记录这些错误类型，可用于统一上报到后端方便其进行分类处理</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  JSError </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">js-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ResourceError </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resource-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  PromiseError </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  HttpError </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  CORSError </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cors-error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="运行时判断错误类型" tabindex="-1">运行时判断错误类型 <a class="header-anchor" href="#运行时判断错误类型" aria-hidden="true">#</a></h2><p>TODO</p><h2 id="为每个错误生成-uid" tabindex="-1">为每个错误生成 uid <a class="header-anchor" href="#为每个错误生成-uid" aria-hidden="true">#</a></h2><p>为什么要为每个错误生成 <code>uid</code> 呢？</p><ul><li><code>防止同一用户重复上报相同错误</code></li><li>多个用户产生的同一个错误可以在服务端归类，用于 <code>分析影响用户数、错误数等指标</code></li></ul><p>对于同一个原因产生的同一个错误，生成的 uid 是相同的，从而起到标识错误的功能</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> genErrorUid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">btoa</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">decodeURIComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p>具体实现参考 <a href="https://aozev637mr.feishu.cn/file/boxcnBSIs0Tkcga1lEQDFwsX5eb" target="_blank" rel="noreferrer">三、异常聚合</a></p></blockquote><h3 id="btoa" tabindex="-1">btoa <a class="header-anchor" href="#btoa" aria-hidden="true">#</a></h3><p>用于将二进制字符串使用 <code>Base64</code> 编码转成 <code>ASCII</code> 字符串</p><ul><li><code>b</code> 代表 <code>binary</code></li><li><code>a</code> 代表 <code>ascii</code></li></ul><p>类似地，可以使用 <code>atob</code> 将 <code>ASCII</code> 字符串转成 二进制字符串</p><h3 id="decodeuricomponent" tabindex="-1">decodeURIComponent <a class="header-anchor" href="#decodeuricomponent" aria-hidden="true">#</a></h3><blockquote><p><code>decodeURIComponent()</code> 方法用于解码由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" target="_blank" rel="noreferrer">encodeURIComponent</a> 方法或者其它类似方法编码的部分统一资源标识符（URI）。</p></blockquote><p>简单来说就是解码 URL 编码的字符串</p><h2 id="javascript-代码运行错误" tabindex="-1">JavaScript 代码运行错误 <a class="header-anchor" href="#javascript-代码运行错误" aria-hidden="true">#</a></h2><p>使用 <code>window.addEventListener(&#39;error&#39;, (ev) =&gt; {})</code> 去捕获 JavaScript 运行时错误</p><p>通过这种方式捕获错误相较于 <code>window.onerror</code> 而言有以下优点：</p><ul><li>可以同时处理静态资源错误</li><li>不会像 <code>window.onerror</code> 那样被覆盖</li></ul><p><code>ev</code> 的类型是 <code>ErrorEvent</code>，从该对象中可以获取到如下信息：</p><p><img src="`+l+`" alt="ErrorEvent的属性"></p><p>我们可以从中获取出错的文件名、行号、列号以及具体的堆栈错误信息，对于堆栈错误信息，我们还需要对其进行解析，设置一个最大解析深度，把每个堆栈的函数名、文件名、行列号等信息都记录下来</p><p>对于错误堆栈解析，可以使用 <a href="https://www.npmjs.com/package/error-stack-parser" target="_blank" rel="noreferrer">error-stack-parser</a> 实现</p><h2 id="资源加载错误" tabindex="-1">资源加载错误 <a class="header-anchor" href="#资源加载错误" aria-hidden="true">#</a></h2><p>比如加载一个不存在的图片：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>会出现如下报错：</p><p><img src="`+e+'" alt="静态资源加载异常"></p><p>可以通过 <code>window.addEventListener(&#39;error&#39;, () =&gt; {}, true)</code> 去捕获</p><p><strong>一定要记得在捕获阶段添加事件监听器，因为静态资源错误是在捕获阶段发生的</strong></p><h2 id="promise-错误" tabindex="-1">Promise 错误 <a class="header-anchor" href="#promise-错误" aria-hidden="true">#</a></h2><p>对于 Promise 错误，是无法被 <code>window.addEventListener(&#39;error&#39;)</code> 捕获到的，需要通过监听 <code>unhandledrejection</code> 事件</p><p>相比于同步代码的错误，异步代码的错误无法获取到行列号等信息，这是浏览器本身的事件循环机制导致的，异步任务需要等到同步任务执行完成后，再从异步队列里取出异步任务并执行，这个时候是无法沿着调用栈回溯这个异步任务的创建时的堆栈信息的。</p><p><img src="'+p+`" alt="unhandledrejection对象的属性"></p><h2 id="http-请求错误" tabindex="-1">Http 请求错误 <a class="header-anchor" href="#http-请求错误" aria-hidden="true">#</a></h2><p>前端网络请求的底层目前主要是两个：<code>XMLHttpRequest</code> 和 <code>Fetch API</code>，我们只需要对这两种 API 进行拦截，每当发送网络请求时生成我们需要的信息，整合到 <code>WebSDK</code> 中，在遇到错误的时候通过 <code>Core</code> 的 <code>sender</code> 实例将错误上报</p><h2 id="cors-跨域错误" tabindex="-1">CORS 跨域错误 <a class="header-anchor" href="#cors-跨域错误" aria-hidden="true">#</a></h2><p>假设现在有两个服务器在运行，分别为服务器 A 和 B，A 运行在 <code>localhost:3000</code>，B 运行在 <code>localhost:3001</code></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">src</span></span>
<span class="line"><span style="color:#A6ACCD;">├── server-a</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── foo.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">└── server-b</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── index.html</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其中 A 提供了一个 <code>foo.js</code> 文件，其代码如下：</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>然后在 B 的 <code>index.html</code> 中通过 <code>http://localhost:3000/foo.js</code> 去加载 A 的 <code>foo.js</code>，并且加上 <code>error</code> 事件监听器</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">charset</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X-UA-Compatible</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">IE=edge</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Server B</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ev</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:3000/foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>此时得到的 <code>ev</code> 对象属性如下：</p><p><img src="`+t+'" alt="跨域时的error事件ev对象"></p><p>可以看到，此时的 <code>msg</code> 是 <code>Script error.</code>，并且行列号、文件名等信息都无法获取了</p><p>其实这是浏览器的一个安全机制：当跨域加载的脚本中发生语法错误时，浏览器出于安全考虑，不会报告错误的细节，而只报告简单的 Script error。</p><p>浏览器只允许同域下的脚本捕获具体错误信息，而其他脚本只知道发生了一个错误，但无法获知错误的具体内容（控制台仍然可以看到，JS 脚本无法捕获），由于现在的环境是两个不同源的服务器之间加载 JavaScript 脚本，从而产生了跨域。</p><h3 id="解决方案" tabindex="-1">解决方案： <a class="header-anchor" href="#解决方案" aria-hidden="true">#</a></h3><ol><li>服务端响应头中添加 <code>Access-Control-Allow-Origin</code> 配置允许跨域的域名</li><li>前端的 <code>&lt;script src=&quot;&quot;&gt;</code> 中加上 <code>crossorigin</code> 属性，即 <code>&lt;script src=&quot;&quot; crossorigin&gt;</code></li></ol>',55),i=[c];function D(d,F,y,C,A,h){return n(),a("div",null,i)}const m=s(r,[["render",D]]);export{g as __pageData,m as default};
