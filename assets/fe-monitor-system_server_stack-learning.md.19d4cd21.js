import{_ as s,c as a,o as n,a as l}from"./app.12a77c61.js";const p="/assets/kafka体验demo.ffee5b96.png",e="/assets/启动单一es节点后的信息.d82ff8eb.png",o="/assets/logstash_structure.0ef0b2c7.png",t="/assets/logstash体验.b7bc7f86.png",c="/assets/beats-platform.d2a60995.png",r="/assets/filebeat体验.ffb4fc90.png",m=JSON.parse('{"title":"相关技术栈学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"NestJS","slug":"nestjs","link":"#nestjs","children":[]},{"level":2,"title":"Kafka","slug":"kafka","link":"#kafka","children":[]},{"level":2,"title":"Elasticsearch","slug":"elasticsearch","link":"#elasticsearch","children":[]},{"level":2,"title":"Kibana","slug":"kibana","link":"#kibana","children":[]},{"level":2,"title":"Logstash","slug":"logstash","link":"#logstash","children":[]},{"level":2,"title":"Filebeat","slug":"filebeat","link":"#filebeat","children":[]}],"relativePath":"fe-monitor-system/server/stack-learning.md","lastUpdated":1674898891000}'),i={name:"fe-monitor-system/server/stack-learning.md"},C=l(`<h1 id="相关技术栈学习" tabindex="-1">相关技术栈学习 <a class="header-anchor" href="#相关技术栈学习" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>后端服务用到的技术栈主要有：</p><ul><li><a href="https://nestjs.com/" target="_blank" rel="noreferrer">NestJS</a></li><li><a href="https://kafka.apache.org/" target="_blank" rel="noreferrer">Kafka</a></li><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.6/elasticsearch-intro.html" target="_blank" rel="noreferrer">Elasticsearch</a></li><li><a href="https://www.elastic.co/guide/en/kibana/8.6/introduction.html" target="_blank" rel="noreferrer">Kibana</a></li><li><a href="https://www.elastic.co/guide/en/logstash/8.6/introduction.html" target="_blank" rel="noreferrer">Logstash</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/8.6/filebeat-installation-configuration.html" target="_blank" rel="noreferrer">Filebeat</a></li></ul><p>本篇文章主要是从一个前端的角度去学习如何简单的使用这些后端技术栈，所以并不会深入讲解</p><h2 id="nestjs" tabindex="-1">NestJS <a class="header-anchor" href="#nestjs" aria-hidden="true">#</a></h2><p>关于 NestJS 的部分可以到本网站对应的模块阅读：<a href="/backend/nest/basic.html">NestJS</a></p><p>NestJS 是一个非常棒的后端框架，个人想法是比 express, koa 等框架更加规范，通过各种装饰器严格规范 MVC 的流程，而不像 koa 等框架实际上并不存在严格的 MVC 流程，当然，可以自行实现一些结构化代码去将项目变得符合 MVC 开发规范</p><p>并没有说 express, koa 等框架不好的意思，实际上 NestJS 底层也是基于 express 进行了封装，由于使用了适配器模式，其还可以将底层框架替换为 fastify，实际上 express 等框架很优秀，在 Node.js 后端框架中存在多年，许多项目也有在使用，而 NestJS 提供的抽象能力让我们能够对很多功能开箱即用，并且有极好的 TypeScript 支持，所以我个人更倾向于使用 NestJS</p><p><strong>如果感兴趣深入学习 NestJS 建议直接阅读官方文档</strong></p><h2 id="kafka" tabindex="-1">Kafka <a class="header-anchor" href="#kafka" aria-hidden="true">#</a></h2><p>关于 Kafka 并不需要深入学习，只要会用即可，整个日志平台中 Kafka 的职责仅仅是开启一个 topic，然后启动一个消费者监听该 topic，当 Filebeat 往该 topic 中加入消息时就将其传递给 Logstash，仅此而已，没有很复杂的操作，所以我们会 Kafka 的基本操作即可</p><p>下面就简单体验一下 kafka 的使用叭~</p><p>使用 <code>docker-compose</code> 搭建一个 kafka 环境</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka-demo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka-demo</span></span>
<span class="line"></span></code></pre></div><p>创建一个 <code>docker-compose.yml</code> 文件，写入如下内容：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">zookeeper</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka_demo_zookeeper</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io/bitnami/zookeeper:3.8</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2181:2181</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zookeeper_data:/bitnami</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ALLOW_ANONYMOUS_LOGIN=yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">kafka</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container_name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka_demo_kafka</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.io/bitnami/kafka:3.3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">9092:9092</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kafka_data:/bitnami</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ALLOW_PLAINTEXT_LISTENER=yes</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zookeeper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">zookeeper_data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">driver</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">local</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">kafka_data</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">driver</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">local</span></span>
<span class="line"></span></code></pre></div><p>启动 <code>docker-compose</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">compose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span></span>
<span class="line"></span></code></pre></div><p>创建一个 topic</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka_demo_kafka</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">/opt/bitnami/kafka/bin/kafka-topics.sh \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--create \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--topic </span><span style="color:#C3E88D;">sample-topic</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--bootstrap-server </span><span style="color:#C3E88D;">localhost:</span><span style="color:#F78C6C;">9092</span></span>
<span class="line"></span></code></pre></div><p>创建一个消费者</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka_demo_kafka</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">/opt/bitnami/kafka/bin/kafka-console-consumer.sh \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--bootstrap-server </span><span style="color:#C3E88D;">localhost:</span><span style="color:#F78C6C;">9092</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--topic </span><span style="color:#C3E88D;">sample-topic</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--from-beginning</span></span>
<span class="line"></span></code></pre></div><p>创建一个生产者</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kafka_demo_kafka</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">/opt/bitnami/kafka/bin/kafka-console-producer.sh \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--broker-list </span><span style="color:#C3E88D;">localhost:</span><span style="color:#F78C6C;">9092</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--topic </span><span style="color:#C3E88D;">sample-topic</span></span>
<span class="line"></span></code></pre></div><p>生产者启动后会有一个输入的命令行，输入消息后回车，消息就会被监听了对应 topic 的消费者接收到</p><p><img src="`+p+`" alt="kafka体验demo"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>想学习 kafka 的话可以看看这篇文章 - <a href="https://juejin.cn/post/6844903495670169607" target="_blank" rel="noreferrer">真的，Kafka 入门一篇文章就够了</a>，也可以去看官方文档</p></div><h2 id="elasticsearch" tabindex="-1">Elasticsearch <a class="header-anchor" href="#elasticsearch" aria-hidden="true">#</a></h2><p>接下来体验一下 Elasticsearch，使用 docker 启动一个单一节点的 es 服务</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elastic</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">es01</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ES_JAVA_OPTS=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-Xms256m -Xmx256m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--net</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elastic</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9200</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">9200</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.elastic.co/elasticsearch/elasticsearch:8.6.1</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Java JVM 内存设置</p><p><code>ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot;</code> 这个环境变量用于控制 es 运行时的 JVM 虚拟机内存大小，如果使用默认配置太卡的话可以考虑减小为 <code>256m</code></p></div><div class="tip custom-block"><p class="custom-block-title">max_map_count 太小问题</p><p>建议先将 docker 宿主机的进程最大虚拟内存容量扩大，默认是 <code>65530</code>，不足以启动 es，至少需要 <code>262144</code></p><p>只生效一次，重启后失效：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">wsl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-desktop</span></span>
<span class="line"><span style="color:#FFCB6B;">sysctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vm.max_map_count=</span><span style="color:#F78C6C;">262144</span></span>
<span class="line"></span></code></pre></div><p>修改配置文件，永久生效：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">wsl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-desktop</span></span>
<span class="line"><span style="color:#FFCB6B;">vi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/sysctl.conf</span></span>
<span class="line"></span></code></pre></div><p>在末尾添加如下行：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">vm.max_map_count=262144</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>应用新的配置：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">wsl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-desktop</span></span>
<span class="line"><span style="color:#FFCB6B;">sysctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span></span>
<span class="line"></span></code></pre></div></div><p>启动成功后会显示默认生成的密码和 <code>kibana enrollment token</code></p><p><img src="`+e+`" alt="启动单一es节点后的信息"></p><p>默认的用户名是 <code>elastic</code>，如果忘记保存生成的密码和 token 也不用担心，elasticsearch 内部提供了相关的脚本重设密码和生成新 token</p><p>重设密码</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">es01</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/elasticsearch/bin/elasticsearch-reset-password</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elastic</span></span>
<span class="line"></span></code></pre></div><p>生成 <code>kibana enrollment token</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">es01</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kibana</span></span>
<span class="line"></span></code></pre></div><h2 id="kibana" tabindex="-1">Kibana <a class="header-anchor" href="#kibana" aria-hidden="true">#</a></h2><p>Kibana 用于对 elasticsearch 的数据进行可视化管理，先来体验下简单搭建个 kibana docker container</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.elastic.co/kibana/kibana:8.6.1</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">kib-</span><span style="color:#F78C6C;">01</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--net</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">elastic</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5601</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">5601</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker.elastic.co/kibana/kibana:8.6.1</span></span>
<span class="line"></span></code></pre></div><p>启动后访问 <code>http://localhost:5601</code>，然后输入上面启动 <code>elasticsearch</code> 时生成的 <code>kibana enrollment token</code></p><p>再输入用户名 <code>elastic</code> 以及生成的密码登录即可</p><h2 id="logstash" tabindex="-1">Logstash <a class="header-anchor" href="#logstash" aria-hidden="true">#</a></h2><p>Logstash 用于消费 kafka 消息队列中的日志消息，首先我们来模拟体验一下其运行流程，同样是使用 docker 的方式创建一个 container</p><p>首先需要介绍一下 logstash 的运行流程</p><p><img src="`+o+`" alt="logstash_structure"></p><blockquote><p>The input plugins consume data from a source, the filter plugins modify the data as you specify, and the output plugins write the data to a destination.</p></blockquote><p>输入输出就不用多解释了，我们可以指定 stdin, kafka 等作为输入端，指定 stdout, elasticsearch 等作为输出端，很好理解</p><p>而 filter 则是 Logstash 的关键，其用于修改数据，这意味着我们可以往 input 加载的数据中注入额外信息</p><p>接下来再说说官方的 docker 镜像会如何运作，它会先加载容器中 <code>/usr/share/logstash/pipeline</code> 目录下的 <code>.conf</code> 配置文件，这些配置文件正是用于描述 input, output 和 filter 的</p><p>所以我们需要先在宿主机创建一个 pipeline 目录用于给 Logstash 使用</p><p><code>./pipeline/logstash.conf</code></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">input { stdin { } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">filter {</span></span>
<span class="line"><span style="color:#A6ACCD;">  grok {</span></span>
<span class="line"><span style="color:#A6ACCD;">    match =&gt; { &quot;message&quot; =&gt; &quot;%{COMBINEDAPACHELOG}&quot; }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  date {</span></span>
<span class="line"><span style="color:#A6ACCD;">    match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">output {</span></span>
<span class="line"><span style="color:#A6ACCD;">  stdout { codec =&gt; rubydebug }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>grok</code>, <code>date</code> 都是 <a href="https://www.elastic.co/guide/en/logstash/8.6/filter-plugins.html" target="_blank" rel="noreferrer">filter plugins</a>，Logstash 提供了很多 plugin 用于对数据进行处理，比如 <a href="https://www.elastic.co/guide/en/logstash/8.6/plugins-filters-grok.html" target="_blank" rel="noreferrer">关于 grok 这一 plugin</a> 的描述中我们就能看到该插件的作用如下：</p><blockquote><p>Parse arbitrary text and structure it.</p><p>Grok is a great way to parse unstructured log data into something structured and queryable.</p><p>This tool is perfect for syslog logs, apache and other webserver logs, mysql logs, and in general, any log format that is generally written for humans and not computer consumption.</p></blockquote><p>那么接下来只需要将 <code>./pipeline</code> 挂载到容器内的 <code>/usr/share/logstash/pipeline/</code> 目录下即可让 Logstash 加载我们定义的 pipeline</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-v </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/pipeline/:/usr/share/logstash/pipeline/</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--name </span><span style="color:#C3E88D;">logstash-demo</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">docker.elastic.co/logstash/logstash:8.6.1</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>docker volume 挂载目录时要用绝对路径，所以这里要加上 <code>$(pwd)</code> 引用当前命令在宿主机执行时的绝对路径</p></div><p>上面我们定义的 pipeline input 为 stdin，output 为 stdout，所以运行后会出现让我们输入内容的提示，输入后就会经过 filter 处理，并将结果输出到 stdout</p><p>输入如下内容：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] &quot;GET /xampp/status.php HTTP/1.1&quot; 200 3891 &quot;http://cadenza/xampp/navi.php&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>效果如下：</p><p><img src="`+t+'" alt="logstash体验"></p><p>搞懂了如何使用后，我们之后实战只需要将 <code>Kafka</code> 的消息作为 input，将 elasticsearch 作为 output 即可将日志数据同步到 elasticsearch 中，并且可以通过 filter 对数据定制处理</p><h2 id="filebeat" tabindex="-1">Filebeat <a class="header-anchor" href="#filebeat" aria-hidden="true">#</a></h2><p>上报接口会将上报的数据写入到日志文件中，Filebeat 负责监听日志文件，当日志文件内容变化时，将数据传递给 Kafka</p><p>elastic 提供了很多种 beat，在监控系统中我们只需要用到 Filebeat 即可</p><p><img src="'+c+`" alt="beats-platform"></p><p>现在我们以读取容器的 <code>/usr/share/test-logs/*</code> 目录中的 <code>.log</code> 文件为例，将读取的结果输出到控制台</p><p>首先在宿主机中创建一个 <code>logs</code> 目录，写入一个 <code>foo.log</code> 文件，文件内容如下：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">========================= Hello, Foo =========================</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后编写一个 filebeat 的配置文件，让其监听 <code>/usr/share/test-logs/</code> 中的日志文件，并且配置输出为控制台，在宿主机当前目录中新建一个 <code>filebeat.docker.yml</code> 文件：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F07178;">filebeat.inputs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">filestream</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">paths</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/share/test-logs/*.log</span></span>
<span class="line"><span style="color:#F07178;">output.console</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">pretty</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>然后启动一个 Filebeat docker container，将配置文件和 <code>./logs</code> 目录挂载到容器的 <code>/usr/share/test-logs/</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--volume=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--volume=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/logs/:/usr/share/test-logs/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">docker.elastic.co/beats/filebeat:8.6.1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">filebeat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--strict.perms=false</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"></span></code></pre></div><p>效果如下：</p><p><img src="`+r+'" alt="filebeat体验"></p><p>在项目实战中，我们只需要把输入端改成 NestJS 输出的日志文件，输出端改成 Kafka 即可</p>',81),y=[C];function D(A,d,h,u,k,F){return n(),a("div",null,y)}const b=s(i,[["render",D]]);export{m as __pageData,b as default};
