import{_ as s,c as e,o as a,a as l}from"./app.0195aaef.js";const m=JSON.parse('{"title":"JSX","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"babel 会传给我们什么？","slug":"babel-会传给我们什么","link":"#babel-会传给我们什么","children":[]},{"level":2,"title":"ReactElement 类型定义","slug":"reactelement-类型定义","link":"#reactelement-类型定义","children":[]}],"relativePath":"framework-source-learning/react/01-jsx/index.md","lastUpdated":1685886325000}'),n={name:"framework-source-learning/react/01-jsx/index.md"},t=l(`<h1 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>jsx 负责将类似 DOM 的结构转换成 ReactElement，ReactElement 是 Virtual DOM 中对 Actual DOM 元素的表示，那么为什么要进行这一转换呢？</p><p>在回答这个问题之前，先要理解为啥需要 ReactElement？可以这么理解：</p><p>在浏览器中，我们编写 html 描述视图，而 html 会被浏览器解析成 DOM 进行后续的渲染工作</p><p>而在 React 所使用的 Virtual DOM 方案中，也需要有类似的 &quot;DOM Element&quot;，那就是 ReactElement，其作为 Virtual DOM 树中的元素，方便 React 的 reconciler 进行 diff，为变化的部分打上对应的变更操作标记 flags，然后应用到 Actual DOM 中</p><p>将 ReactElement 类比为 DOM Element，那么它也应当能像编写 html 一样通过标记语言的方式方便地描述视图，如果需要通过 <code>React.createElement()</code> 的方式去描述视图的话，写起来很不直观，且可读性也很差</p><p>为此，jsx 的作用就体现出来了，开发者仍然像编写 html 一样去描述视图，然后由 babel 将 jsx 文件里的 jsx 代码编译成 <code>React.createElement()</code> 的调用，从而传给 React 处理的仍然是 ReactElement，保证其能够正常工作的同时，也让开发者的开发体验更加友好</p><p>编译的工作已经交给 babel 去处理了，但是对于 jsx 需要编译成什么样的结果，这个是需要有使用方自行决定的，需要描述如何将 jsx 转成 ReactElement，babel 负责将解析的 jsx 的参数传递给你，比如标签名 type，标签里的属性 props，标签里的子元素等等</p><p>也就是说我们需要实现一个运行时的转换逻辑，为此将其称为 <code>jsx-runtime</code>，这样一来也有另一个好处就是当需要实现一个别的使用 jsx 的框架，比如 Solid.js，就可以根据框架的特点将 jsx 转换成另一种符合需求的数据结构，可以是 SolidElement、VueElement、XXXElement 等等</p><h2 id="babel-会传给我们什么" tabindex="-1">babel 会传给我们什么？ <a class="header-anchor" href="#babel-会传给我们什么" aria-hidden="true">#</a></h2><p>实现 <code>jsx-runtime</code> 需要导出一个 jsx 函数，其接受的参数格式如下：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * jsx 转换的运行时实现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#676E95;font-style:italic;"> 比如 div, p, h1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">config</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * ReactElementConfig - 用于作为 ReactElementProps 的值</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 但会对 \`key\` 和 \`ref\` 这两个特殊属性进行处理，不赋值到 props 中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">maybeChildren</span><span style="color:#676E95;font-style:italic;"> 传入的话则赋值到 props.children 中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactElementType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactElementConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">maybeChildren</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactElement</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 进行转换操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在实现 <code>jsx-runtime</code> 之前，先要知道 babel 会传递什么东西给我们，这样才能根据需要去进行转换</p><h2 id="reactelement-类型定义" tabindex="-1">ReactElement 类型定义 <a class="header-anchor" href="#reactelement-类型定义" aria-hidden="true">#</a></h2><p>首先定义一下 ReactElement 的类型，其包含了</p>`,16),o=[t];function p(c,i,r,y,d,D){return a(),e("div",null,o)}const C=s(n,[["render",p]]);export{m as __pageData,C as default};
