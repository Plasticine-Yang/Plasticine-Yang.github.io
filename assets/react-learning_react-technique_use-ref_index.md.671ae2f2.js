import{_ as e,c as s,o as a,a as n}from"./app.638d8eee.js";const _=JSON.parse('{"title":"useRef 汇总","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 类型","slug":"typescript-类型","link":"#typescript-类型","children":[{"level":3,"title":"传入泛型和 null 后变成 readonly","slug":"传入泛型和-null-后变成-readonly","link":"#传入泛型和-null-后变成-readonly","children":[]},{"level":3,"title":"泛型 null + 非空断言符号","slug":"泛型-null-非空断言符号","link":"#泛型-null-非空断言符号","children":[]}]}],"relativePath":"react-learning/react-technique/use-ref/index.md","lastUpdated":1675946878000}'),l={name:"react-learning/react-technique/use-ref/index.md"},t=n(`<h1 id="useref-汇总" tabindex="-1">useRef 汇总 <a class="header-anchor" href="#useref-汇总" aria-hidden="true">#</a></h1><h2 id="typescript-类型" tabindex="-1">TypeScript 类型 <a class="header-anchor" href="#typescript-类型" aria-hidden="true">#</a></h2><h3 id="传入泛型和-null-后变成-readonly" tabindex="-1">传入泛型和 null 后变成 readonly <a class="header-anchor" href="#传入泛型和-null-后变成-readonly" aria-hidden="true">#</a></h3><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// divRef.current 会变成 readonly</span></span>
<span class="line"></span></code></pre></div><h3 id="泛型-null-非空断言符号" tabindex="-1">泛型 null + 非空断言符号 <a class="header-anchor" href="#泛型-null-非空断言符号" aria-hidden="true">#</a></h3><p>使用 <code>useRef</code> 时我们常常会初始化一个 <code>null</code> 作为初始值，但是在后续使用的时候又总是要去判空，并且不能对其进行修改，因为 <code>ref.current</code> 的类型会变成 <code>readonly</code>，十分不方便，但是通过 null 加上非空断言符号即可解决这个问题</p><p>e.g.</p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> divRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null!</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,8),p=[t];function o(r,c,i,d,u,y){return a(),s("div",null,p)}const C=e(l,[["render",o]]);export{_ as __pageData,C as default};
